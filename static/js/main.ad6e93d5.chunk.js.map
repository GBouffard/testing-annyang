{"version":3,"sources":["Annyang.js","imagesUrls.js","App.js","reportWebVitals.js","index.js"],"names":["annyang","start","abort","resume","showMickey","showDonald","showGoofy","showBoubou","addCommands","mickey","donald","goofy","booboo","engineCallback","resultCallback","addCallback","event","error","baseUrl","process","imagesUrls","App","status","voiceInput","setState","selectedName","state","voiceStatus","this","isSupported","className","alt","src","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA+De,M,2FA3Db,WACE,OAAmB,OAAZA,M,mBAIT,WACMA,KACFA,IAAQC,U,mBAKZ,WACMD,KACFA,IAAQE,U,oBAKZ,WACMF,KACFA,IAAQG,W,yBAKZ,SAAYC,EAAYC,EAAYC,EAAWC,GACzCP,KACFA,IAAQQ,YAAY,CAClBC,OAAQ,kBAAML,KACdM,OAAQ,kBAAML,KACdM,MAAO,kBAAML,KACbM,OAAQ,kBAAML,S,yBAMpB,SAAYM,EAAgBC,GACtBd,MAEFA,IAAQe,YAAY,SAAS,SAACC,GAAD,OAAWH,EAAe,SACvDb,IAAQe,YAAY,cAAc,SAACC,GAAD,OAAWH,EAAe,gBAC5Db,IAAQe,YAAY,OAAO,SAACC,GAAD,OAAWH,EAAe,UACrDb,IAAQe,YAAY,SAAS,SAACC,GAAD,OAAWH,EAAeG,EAAMC,UAC7DjB,IAAQe,YAAY,gBAAgB,SAACC,GAAD,OAClCH,EAAe,oBAEjBb,IAAQe,YAAY,0BAA0B,SAACC,GAAD,OAC5CH,EAAe,yBAEjBb,IAAQe,YAAY,yBAAyB,SAACC,GAAD,OAC3CH,EAAe,wBAEjBb,IAAQe,YAAY,UAAU,SAACC,GAAD,OAAWF,EAAeE,W,MC1DxDE,EAAUC,mBASDC,EAPI,CACjBR,OAAO,GAAD,OAAKM,EAAL,sBACNT,OAAO,GAAD,OAAKS,EAAL,sBACNR,OAAO,GAAD,OAAKQ,EAAL,sBACNP,MAAM,GAAD,OAAKO,EAAL,sB,OCwGQG,EA1Gf,kDACE,aAAe,IAAD,8BACZ,gBAiCFR,eAAiB,SAACS,KAlCJ,EAuCdR,eAAiB,SAACS,KAvCJ,EA2CdnB,WAAa,WACX,EAAKoB,SAAS,CACZC,aAAc,YA7CJ,EAiDdpB,WAAa,WACX,EAAKmB,SAAS,CACZC,aAAc,YAnDJ,EAuDdnB,UAAY,WACV,EAAKkB,SAAS,CACZC,aAAc,WAzDJ,EA6DdlB,WAAa,WACX,EAAKiB,SAAS,CACZC,aAAc,YA7DhB,EAAKC,MAAQ,CACXC,YAAa,QACbF,aAAc,UAJJ,EADhB,qDASE,WAEEzB,EAAQQ,YACNoB,KAAKxB,WACLwB,KAAKvB,WACLuB,KAAKtB,UACLsB,KAAKrB,YAIPP,EAAQe,YAAYa,KAAKf,eAAgBe,KAAKd,gBAG9Cd,EAAQC,QAER2B,KAAKJ,SAAS,CACZG,YAAa3B,EAAQ6B,cAAgB,YAAc,kBAzBzD,kCA8BE,WACE7B,EAAQE,UA/BZ,oBAoEE,WACE,MAAsC0B,KAAKF,MAAnCC,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,aAErB,OACE,sBAAKK,UAAU,MAAf,UACE,qBAAKA,UAAU,sBAAf,SACI9B,EAAD,qBAEiB2B,EAFjB,MACG,kDAIL3B,GACC,qCACE,qBAAK8B,UAAU,oBAAf,oCACA,+BACE,oBAAIA,UAA4B,WAAjBL,EAA4B,aAAe,GAA1D,oBAGA,oBAAIK,UAA4B,WAAjBL,EAA4B,aAAe,GAA1D,oBAGA,oBAAIK,UAA4B,UAAjBL,EAA2B,aAAe,GAAzD,sBAKF,qBACEM,IAAI,iBACJD,UAAU,QACVE,IAAKZ,EAAWK,eAjG9B,GAAyBQ,aCQVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad6e93d5.chunk.js","sourcesContent":["import annyang from \"annyang\";\n\nclass Annyang {\n  // to check whether annyang is supported\n  isSupported() {\n    return annyang !== null;\n  }\n\n  // to start voice recognition\n  start() {\n    if (annyang) {\n      annyang.start();\n    }\n  }\n\n  // to stop voice recognition\n  abort() {\n    if (annyang) {\n      annyang.abort();\n    }\n  }\n\n  // to start voice recognition again from abort\n  resume() {\n    if (annyang) {\n      annyang.resume();\n    }\n  }\n\n  // to predefine the command word(s) you want to say. Once annyang picks up those words, it will trigger the callback corresponding to each command\n  addCommands(showMickey, showDonald, showGoofy, showBoubou) {\n    if (annyang) {\n      annyang.addCommands({\n        mickey: () => showMickey(),\n        donald: () => showDonald(),\n        goofy: () => showGoofy(),\n        booboo: () => showBoubou(),\n      });\n    }\n  }\n\n  // where we get the voice engine status and voice input\n  addCallback(engineCallback, resultCallback) {\n    if (annyang) {\n      /* eslint-disable no-unused-vars */\n      annyang.addCallback(\"start\", (event) => engineCallback(\"on\"));\n      annyang.addCallback(\"soundstart\", (event) => engineCallback(\"listening\"));\n      annyang.addCallback(\"end\", (event) => engineCallback(\"off\"));\n      annyang.addCallback(\"error\", (event) => engineCallback(event.error));\n      annyang.addCallback(\"errorNetwork\", (event) =>\n        engineCallback(\"network error\")\n      );\n      annyang.addCallback(\"errorPermissionBlocked\", (event) =>\n        engineCallback(\"permission blocked\")\n      );\n      annyang.addCallback(\"errorPermissionDenied\", (event) =>\n        engineCallback(\"permission denied\")\n      );\n      annyang.addCallback(\"result\", (event) => resultCallback(event));\n    }\n  }\n}\n\nexport default new Annyang();\n","const baseUrl = process.env.PUBLIC_URL;\n\nconst imagesUrls = {\n  booboo: `${baseUrl}/images/boubou.jpg`,\n  mickey: `${baseUrl}/images/mickey.jpg`,\n  donald: `${baseUrl}/images/donald.jpg`,\n  goofy: `${baseUrl}/images/goofy.jpg`,\n};\n\nexport default imagesUrls;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport annyang from \"./Annyang\";\nimport imagesUrls from \"./imagesUrls\";\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      voiceStatus: \"hello\",\n      selectedName: \"booboo\",\n    };\n  }\n\n  componentDidMount() {\n    // 1) bind with predefined words/commands on mount\n    annyang.addCommands(\n      this.showMickey,\n      this.showDonald,\n      this.showGoofy,\n      this.showBoubou\n    );\n\n    // 2) add callbacks?\n    annyang.addCallback(this.engineCallback, this.resultCallback);\n\n    // 3) start Annyang\n    annyang.start();\n\n    this.setState({\n      voiceStatus: annyang.isSupported() ? \"Supported\" : \"Unsupported\",\n    });\n  }\n\n  // remove annyang on unmount\n  componentWillUnmount() {\n    annyang.abort();\n  }\n\n  // eslint-disable-next-line\n  engineCallback = (status) => {\n    // Set engine status\n  };\n\n  // eslint-disable-next-line\n  resultCallback = (voiceInput) => {\n    // Match voice input with player commands\n  };\n\n  showMickey = () => {\n    this.setState({\n      selectedName: \"mickey\",\n    });\n  };\n\n  showDonald = () => {\n    this.setState({\n      selectedName: \"donald\",\n    });\n  };\n\n  showGoofy = () => {\n    this.setState({\n      selectedName: \"goofy\",\n    });\n  };\n\n  showBoubou = () => {\n    this.setState({\n      selectedName: \"booboo\",\n    });\n  };\n\n  render() {\n    const { voiceStatus, selectedName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__annyang-status\">\n          {!annyang\n            ? \"Speech Recognition / Annyang is not supported\"\n            : `Annyang is ${voiceStatus}!!`}\n        </div>\n\n        {annyang && (\n          <>\n            <div className=\"App__instructions\">Say one of these names</div>\n            <ul>\n              <li className={selectedName === \"mickey\" ? \"isSelected\" : \"\"}>\n                Mickey\n              </li>\n              <li className={selectedName === \"donald\" ? \"isSelected\" : \"\"}>\n                Donald\n              </li>\n              <li className={selectedName === \"goofy\" ? \"isSelected\" : \"\"}>\n                Goofy\n              </li>\n            </ul>\n\n            <img\n              alt=\"Guillaume logo\"\n              className=\"image\"\n              src={imagesUrls[selectedName]}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}